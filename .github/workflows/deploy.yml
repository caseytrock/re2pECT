name: Infrastructure and Deployment Pipeline

on:
  push:
    branches: [main]

env:
  AWS_REGION: 'us-west-2'
  FLASK_PORT: '5000'

jobs:
  provision-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      ec2_ip: ${{ steps.get-outputs.outputs.public_ip }}
      ssh_key: ${{ steps.get-outputs.outputs.ssh_private_key }}
      kubeconfig_cmd: ${{ steps.get-outputs.outputs.kubeconfig }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        id: terraform-apply
        run: terraform apply -auto-approve
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Get Terraform Outputs
        id: get-outputs
        run: |
          # Get and encode outputs to handle special characters
          PUBLIC_IP=$(terraform -chdir=./terraform output -raw public_ip)
          SSH_KEY=$(terraform -chdir=./terraform output -raw ssh_private_key | base64 -w0)
          KUBECONFIG_CMD=$(terraform -chdir=./terraform output -raw kubeconfig | base64 -w0)
          
          echo "public_ip=${PUBLIC_IP}" >> $GITHUB_OUTPUT
          echo "ssh_private_key=${SSH_KEY}" >> $GITHUB_OUTPUT
          echo "kubeconfig=${KUBECONFIG_CMD}" >> $GITHUB_OUTPUT
          echo "EC2_IP=${PUBLIC_IP}" >> $GITHUB_ENV

          # Write key to file for immediate use
          mkdir -p ~/.ssh
          terraform -chdir=./terraform output -raw ssh_private_key > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      - name: Verify k3s Installation
        run: |
          echo "Waiting for k3s to become ready..."
          ssh -o StrictHostKeyChecking=no \
              -i ~/.ssh/deploy_key \
              ec2-user@${{ env.EC2_IP }} \
              "until kubectl get nodes >/dev/null 2>&1; do sleep 5; done"
          echo "k3s is ready!"

  deploy-application:
    needs: provision-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Decode SSH Key
        id: decode-ssh-key
        run: |
          echo "${{ needs.provision-infrastructure.outputs.ssh_key }}" | base64 -d > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      - name: Verify EC2 Access
        run: |
          echo "Testing SSH connection to ${{ needs.provision-infrastructure.outputs.ec2_ip }}..."
          ssh -o StrictHostKeyChecking=no \
              -i ~/.ssh/deploy_key \
              ec2-user@${{ needs.provision-infrastructure.outputs.ec2_ip }} \
              "echo 'SSH connection successful! $(hostname)'"

      # Rest of your deployment steps remain the same...
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/re2pect-app:latest
            ghcr.io/${{ github.repository_owner }}/re2pect-app:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to k3s
        run: |
          ssh -o StrictHostKeyChecking=no \
              -i ~/.ssh/deploy_key \
              ec2-user@${{ needs.provision-infrastructure.outputs.ec2_ip }} "
            kubectl apply -f - <<EOF
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: re2pect-app
            spec:
              replicas: 2
              selector:
                matchLabels:
                  app: re2pect-app
              template:
                metadata:
                  labels:
                    app: re2pect-app
                spec:
                  containers:
                  - name: app
                    image: ghcr.io/${{ github.repository_owner }}/re2pect-app:${{ github.sha }}
                    ports:
                    - containerPort: ${{ env.FLASK_PORT }}
            EOF
          "