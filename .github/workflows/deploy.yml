name: Infrastructure and Deployment Pipeline

on:
  push:
    branches: [main]

env:
  AWS_REGION: 'us-west-2'

jobs:
  provision-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        id: terraform-apply
        run: terraform apply -auto-approve
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Get Instance ID
        id: get-instance-id
        run: |
          echo "instance_id=$(terraform -chdir=./terraform output -raw instance_id)" >> $GITHUB_OUTPUT

      - name: Wait for Public IP
        id: wait-for-ip
        run: |
          INSTANCE_ID=${{ steps.get-instance-id.outputs.instance_id }}
          TIMEOUT=$((SECONDS + 180))  # 3 minute timeout
          
          while [ $SECONDS -lt $TIMEOUT ]; do
            IP=$(aws ec2 describe-instances \
              --instance-ids $INSTANCE_ID \
              --query 'Reservations[0].Instances[0].PublicIpAddress' \
              --output text \
              --region ${{ env.AWS_REGION }})
            
            if [ "$IP" != "None" ] && [ -n "$IP" ]; then
              echo "EC2_IP=$IP" >> $GITHUB_ENV
              echo "::set-output name=ec2_ip::$IP"
              echo "IP found: $IP"
              exit 0
            fi
            
            echo "Waiting for public IP assignment..."
            sleep 10
          done
          
          echo "::error::Timeout waiting for public IP"
          exit 1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Verify Connectivity
        run: |
          echo "Testing connection to ${{ env.EC2_IP }}..."
          ping -c 4 ${{ env.EC2_IP }} || echo "Ping test failed (may be normal)"
          nc -zv -w 5 ${{ env.EC2_IP }} 22 || echo "Port 22 test failed"

      - name: Extract SSH Key
        id: extract-ssh-key
        run: |
          SSH_KEY=$(terraform -chdir=./terraform output -raw ssh_private_key)
          echo "SSH_PRIVATE_KEY<<EOF" >> $GITHUB_ENV
          echo "$SSH_KEY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

  deploy-application:
    needs: provision-infrastructure
    runs-on: ubuntu-latest
    env:
      EC2_IP: ${{ needs.provision-infrastructure.outputs.ec2_ip }}  # ðŸ‘ˆ Get EC2 IP from previous job!!! well, that didn't work. gonna try adding it manually lol
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure SSH
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ needs.provision-infrastructure.outputs.ssh_key }} #adding this directly too, like the ec2 ip
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Verify EC2 Access
        run: |
          echo "Testing SSH connection to ${{ needs.provision-infrastructure.outputs.ec2_ip }}..."
          ssh -o StrictHostKeyChecking=no \
              -o ConnectTimeout=30 \
              ec2-user@${{ needs.provision-infrastructure.outputs.ec2_ip }} \
              "echo 'SSH connection successful! $(hostname)'"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/re2pect-app:latest
            ghcr.io/${{ github.repository_owner }}/re2pect-app:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to k3s
        run: |
          ssh -o StrictHostKeyChecking=no \
              -o ConnectTimeout=30 \
              ec2-user@${{ needs.provision-infrastructure.outputs.ec2_ip }} "
            kubectl apply -f - <<EOF
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: re2pect-app
            spec:
              replicas: 2
              selector:
                matchLabels:
                  app: re2pect-app
              template:
                metadata:
                  labels:
                    app: re2pect-app
                spec:
                  containers:
                  - name: app
                    image: ghcr.io/${{ github.repository_owner }}/re2pect-app:${{ github.sha }}
                    ports:
                    - containerPort: 5000
            EOF
          "