name: Infrastructure and Deployment Pipeline

on:
  push:
    branches: [main]

env:
  AWS_REGION: 'us-west-2'
  FLASK_PORT: '5000'
  DOCKER_IMAGE: ghcr.io/${{ github.repository_owner }}/re2pect-app:latest

jobs:
  provision-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      ec2_ip: ${{ steps.get-outputs.outputs.public_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="ghcr_username=${{ github.repository_owner }}" -var="ghcr_token=${{ secrets.GITHUB_TOKEN }}"
        working-directory: ./terraform

      - name: Get Public IP
        id: get-outputs
        run: |
          echo "public_ip=$(terraform -chdir=./terraform output -raw public_ip)" >> $GITHUB_OUTPUT

      - name: Prepare SSH Key
        run: |
          mkdir -p ./ssh_artifacts
          terraform -chdir=./terraform output -raw ssh_private_key > ./ssh_artifacts/deploy_key
          chmod 600 ./ssh_artifacts/deploy_key

      - name: Upload SSH Key
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ssh-key
          path: ./ssh_artifacts/deploy_key
          retention-days: 1

      - name: Verify Instance Readiness
        run: |
          IP=${{ steps.get-outputs.outputs.public_ip }}
          until nc -z -w5 $IP 22; do sleep 10; echo "Waiting for SSH..."; done

  deploy-application:
    needs: provision-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Download SSH Key
        uses: actions/download-artifact@v4
        with:
          name: ssh-key
          path: ~/.ssh/

      - name: Configure SSH
        run: |
          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/deploy_key
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Verify k3s Readiness (Containerd)
        run: |
          ssh -i ~/.ssh/deploy_key \
              ec2-user@${{ needs.provision-infrastructure.outputs.ec2_ip }} \
              "until sudo crictl ps &>/dev/null && kubectl get nodes &>/dev/null; do sleep 5; echo 'Waiting for containerd/k3s...'; done"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: ./app
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}
            ghcr.io/${{ github.repository_owner }}/re2pect-app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Configure GHCR Auth for Containerd
        run: |
          IP=${{ needs.provision-infrastructure.outputs.ec2_ip }}
          ssh -i ~/.ssh/deploy_key ec2-user@$IP << 'EOF'
          # Create containerd registry config
          sudo mkdir -p /etc/rancher/k3s/
          cat << 'EOL' | sudo tee /etc/rancher/k3s/registries.yaml
          mirrors:
            ghcr.io:
              endpoint:
                - "https://ghcr.io"
          configs:
            "ghcr.io":
              auth:
                username: "${{ github.repository_owner }}"
                password: "${{ secrets.GITHUB_TOKEN }}"
          EOL
          
          # Restart k3s to apply changes
          sudo systemctl restart k3s
          
          # Verify pull with credentials
          sudo crictl pull --creds "${{ github.repository_owner }}:${{ secrets.GITHUB_TOKEN }}" ${{ env.DOCKER_IMAGE }}
          EOF

      - name: Deploy with Traefik Ingress
        run: |
          cat <<EOF > deploy.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: re2pect-app
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: re2pect-app
            template:
              metadata:
                labels:
                  app: re2pect-app
              spec:
                containers:
                - name: app
                  image: ${{ env.DOCKER_IMAGE }}
                  imagePullPolicy: Always
                  ports:
                  - containerPort: ${{ env.FLASK_PORT }}
                  readinessProbe:
                    httpGet:
                      path: /
                      port: ${{ env.FLASK_PORT }}
                    initialDelaySeconds: 10
                    periodSeconds: 5
                  livenessProbe:
                    httpGet:
                      path: /
                      port: ${{ env.FLASK_PORT }}
                    initialDelaySeconds: 30
                    periodSeconds: 10
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: re2pect-app-service
          spec:
            ports:
            - port: ${{ env.FLASK_PORT }}
              targetPort: ${{ env.FLASK_PORT }}
            selector:
              app: re2pect-app
          ---
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: re2pect-app-ingress
            annotations:
              traefik.ingress.kubernetes.io/router.entrypoints: web
          spec:
            rules:
            - host: "${{ needs.provision-infrastructure.outputs.ec2_ip }}.nip.io"
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: re2pect-app-service
                      port:
                        number: ${{ env.FLASK_PORT }}
          EOF

          scp -i ~/.ssh/deploy_key deploy.yaml ec2-user@${{ needs.provision-infrastructure.outputs.ec2_ip }}:~/deploy.yaml
          ssh -i ~/.ssh/deploy_key \
              ec2-user@${{ needs.provision-infrastructure.outputs.ec2_ip }} \
              "kubectl apply -f deploy.yaml && kubectl get pods,svc,ingress"

      - name: Wait for Application Readiness
        timeout-minutes: 10
        run: |
          IP=${{ needs.provision-infrastructure.outputs.ec2_ip }}
          # Wait for pods to be running
          ssh -i ~/.ssh/deploy_key ec2-user@$IP \
            "until kubectl get pods -o jsonpath='{.items[*].status.phase}' | grep -q Running; do sleep 5; echo 'Waiting for pods to be ready...'; done"
          
          # Wait for ingress to be available
          ssh -i ~/.ssh/deploy_key ec2-user@$IP \
            "until kubectl get ingress re2pect-app-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}' &>/dev/null; do sleep 5; echo 'Waiting for ingress...'; done"

      - name: Debug Pod Issues (On Failure)
        if: failure()
        run: |
          IP=${{ needs.provision-infrastructure.outputs.ec2_ip }}
          ssh -i ~/.ssh/deploy_key ec2-user@$IP << 'EOF'
          echo "=== Pod Status ==="
          kubectl get pods -o wide
          echo "=== Pod Details ==="
          kubectl describe pods -l app=re2pect-app
          echo "=== Containerd Pull Logs ==="
          sudo crictl inspecti ${{ env.DOCKER_IMAGE }}
          EOF

      - name: Verify Application
        run: |
          IP=${{ needs.provision-infrastructure.outputs.ec2_ip }}
          curl -v --retry 5 --retry-delay 10 \
            http://$IP/ \
            http://$IP.nip.io/