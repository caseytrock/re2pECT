name: Infrastructure and Deployment Pipeline

on:
  push:
    branches: [main]

env:
  AWS_REGION: 'us-west-2'
  FLASK_PORT: '5000'

jobs:
  provision-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      ec2_ip: ${{ steps.get-outputs.outputs.public_ip }}
      ssh_key: ${{ steps.extract-ssh-key.outputs.ssh_key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        id: terraform-apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

      - name: Get Public IP
        id: get-outputs
        run: |
          echo "public_ip=$(terraform -chdir=./terraform output -raw public_ip)" >> $GITHUB_OUTPUT

      - name: Extract SSH Key
        id: extract-ssh-key
        run: |
          SSH_KEY=$(terraform -chdir=./terraform output -raw ssh_private_key)
          echo "ssh_key=${SSH_KEY}" >> $GITHUB_OUTPUT
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      - name: Verify SSH Access
        run: |
          IP=${{ steps.get-outputs.outputs.public_ip }}
          ssh -o StrictHostKeyChecking=no \
              -i ~/.ssh/deploy_key \
              ec2-user@$IP \
              "echo 'SSH connection successful!'"

  deploy-application:
    needs: provision-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ needs.provision-infrastructure.outputs.ssh_key }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Verify SSH Connection
        run: |
          ssh -i ~/.ssh/deploy_key \
              ec2-user@${{ needs.provision-infrastructure.outputs.ec2_ip }} \
              "echo 'SSH verification successful!'"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy with Traefik Ingress
        run: |
          cat <<EOF > deploy.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: re2pect-app
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: re2pect-app
            template:
              metadata:
                labels:
                  app: re2pect-app
              spec:
                containers:
                - name: app
                  image: ghcr.io/${{ github.repository_owner }}/re2pect-app:latest
                  ports:
                  - containerPort: ${{ env.FLASK_PORT }}
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: re2pect-app-service
          spec:
            ports:
            - port: ${{ env.FLASK_PORT }}
              targetPort: ${{ env.FLASK_PORT }}
            selector:
              app: re2pect-app
          ---
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: re2pect-app-ingress
            annotations:
              traefik.ingress.kubernetes.io/router.entrypoints: web
          spec:
            rules:
            - http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: re2pect-app-service
                      port:
                        number: ${{ env.FLASK_PORT }}
          EOF

          scp -i ~/.ssh/deploy_key deploy.yaml ec2-user@${{ needs.provision-infrastructure.outputs.ec2_ip }}:~/deploy.yaml
          ssh -i ~/.ssh/deploy_key \
              ec2-user@${{ needs.provision-infrastructure.outputs.ec2_ip }} \
              "kubectl apply -f deploy.yaml && kubectl get pods,svc,ingress"