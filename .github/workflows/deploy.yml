name: Infrastructure and Deployment Pipeline

on:
  push:
    branches: [main]

env:
  AWS_REGION: 'us-west-2'
  FLASK_PORT: '5000'
  DOCKER_IMAGE: ghcr.io/${{ github.repository_owner }}/re2pect-app:latest

jobs:
  provision-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      ec2_ip: ${{ steps.get-outputs.outputs.public_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        id: tf-apply
        run: |
          terraform apply -auto-approve \
            -var="ghcr_username=${{ github.repository_owner }}" \
            -var="ghcr_token=${{ secrets.GITHUB_TOKEN }}" \
            -input=false
        working-directory: ./terraform

      - name: Get Public IP
        id: get-outputs
        run: |
          IP=$(terraform -chdir=./terraform output -raw public_ip)
          echo "public_ip=${IP}" >> $GITHUB_OUTPUT
          echo "Using EC2 instance: ${IP}"

      - name: Prepare SSH Key
        run: |
          mkdir -p ./ssh_artifacts
          terraform -chdir=./terraform output -raw ssh_private_key > ./ssh_artifacts/deploy_key
          chmod 600 ./ssh_artifacts/deploy_key

      - name: Upload SSH Key
        uses: actions/upload-artifact@v4
        with:
          name: ssh-key
          path: ./ssh_artifacts/deploy_key
          retention-days: 1

  deploy-application:
    needs: provision-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Verify EC2 Exists
        run: |
          if [ -z "${{ needs.provision-infrastructure.outputs.ec2_ip }}" ]; then
            echo "::error::No EC2 instance available"
            exit 1
          fi
          echo "Using EC2 instance: ${{ needs.provision-infrastructure.outputs.ec2_ip }}"

      - name: Download SSH Key
        uses: actions/download-artifact@v4
        with:
          name: ssh-key
          path: ~/.ssh/

      - name: Configure SSH
        run: |
          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/deploy_key
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Verify k3s Readiness
        run: |
          ssh -i ~/.ssh/deploy_key \
            ec2-user@${{ needs.provision-infrastructure.outputs.ec2_ip }} \
            "until kubectl cluster-info &>/dev/null; do sleep 10; echo 'Waiting for k3s API...'; done"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          push: true
          tags: ${{ env.DOCKER_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy Application
        run: |
          # Create image pull secret
          ssh -i ~/.ssh/deploy_key ec2-user@${{ needs.provision-infrastructure.outputs.ec2_ip }} << 'EOF'
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=ghcr.io \
            --docker-username=${{ github.repository_owner }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --docker-email=actions@github.com \
            --dry-run=client -o yaml | kubectl apply -f -
          EOF

          cat <<EOF > deploy.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: re2pect-app
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: re2pect-app
            template:
              metadata:
                labels:
                  app: re2pect-app
              spec:
                imagePullSecrets:
                - name: ghcr-secret
                containers:
                - name: app
                  image: ${{ env.DOCKER_IMAGE }}
                  imagePullPolicy: Always
                  ports:
                  - containerPort: ${{ env.FLASK_PORT }}
                  readinessProbe:
                    httpGet:
                      path: /health  # Use dedicated health endpoint
                      port: 5000
                    initialDelaySeconds: 5
                    periodSeconds: 5
                    timeoutSeconds: 1

                  livenessProbe:
                    httpGet:
                      path: /health
                      port: 5000
                    initialDelaySeconds: 10
                    periodSeconds: 10
                  resources:
                    limits:
                      cpu: "500m"
                      memory: "256Mi"
                    requests:
                      cpu: "100m"
                      memory: "128Mi"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: re2pect-app-service
          spec:
            type: ClusterIP
            ports:
            - port: 80
              targetPort: ${{ env.FLASK_PORT }}
            selector:
              app: re2pect-app
          ---
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: re2pect-app-ingress
          spec:
            rules:
            - http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: re2pect-app-service
                      port:
                        number: 80
          EOF

          scp -i ~/.ssh/deploy_key deploy.yaml ec2-user@${{ needs.provision-infrastructure.outputs.ec2_ip }}:~/ 
          ssh -i ~/.ssh/deploy_key ec2-user@${{ needs.provision-infrastructure.outputs.ec2_ip }} \
            "kubectl apply -f deploy.yaml && sleep 20"

      - name: Verify Deployment
        run: |
          IP=${{ needs.provision-infrastructure.outputs.ec2_ip }}
          ssh -i ~/.ssh/deploy_key ec2-user@$IP << 'EOF'
          kubectl rollout status deployment/re2pect-app --timeout=180s
          echo "=== Cluster Status ==="
          kubectl get pods,svc,ingress -A
          EOF

      - name: Test Application
        run: |
          IP=${{ needs.provision-infrastructure.outputs.ec2_ip }}
          echo "Testing application at http://$IP"
          
          # Wait for Traefik to route traffic
          for i in {1..30}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -m 5 "http://$IP")
            if [ "$STATUS" = "200" ]; then
              echo "✅ Application responded with HTTP 200"
              curl -v "http://$IP"  # Debug output
              exit 0
            fi
            echo "Attempt $i: HTTP $STATUS, waiting..."
            sleep 5
          done
          
          # Debug output on failure
          echo "❌ Application did not return 200 OK"
          ssh -i ~/.ssh/deploy_key ec2-user@$IP << 'EOF'
          kubectl get pods,svc,ingress -A
          kubectl logs -n kube-system -l app.kubernetes.io/name=traefik --tail=50
          kubectl logs deployment/re2ect-app --tail=50
          EOF
          exit 1