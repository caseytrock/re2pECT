name: Infrastructure and Deployment Pipeline

on:
  push:
    branches: [main]

jobs:
  provision-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        id: terraform
        run: terraform apply -auto-approve
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Extract Outputs
        id: extract-outputs
        run: |
          EC2_IP=$(terraform -chdir=./terraform output -raw public_ip)
          SSH_KEY=$(terraform -chdir=./terraform output -raw ssh_private_key)
          
          # Verify outputs exist
          if [ -z "$EC2_IP" ] || [ -z "$SSH_KEY" ]; then
            echo "::error::Failed to extract Terraform outputs"
            exit 1
          fi
          
          # Multi-line safe output handling
          echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
          echo "SSH_PRIVATE_KEY<<EOF" >> $GITHUB_ENV
          echo "$SSH_KEY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

  deploy-application:
    needs: provision-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure SSH
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app  # Point to app directory
          push: true
          tags: ghcr.io/${{ github.repository }}:latest
          secrets: |
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to k3s
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_IP }} "
            kubectl apply -f - <<EOF
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: flask-app
            spec:
              replicas: 2
              selector:
                matchLabels:
                  app: flask
              template:
                metadata:
                  labels:
                    app: flask
                spec:
                  containers:
                  - name: flask
                    image: ghcr.io/${{ github.repository }}:latest
                    ports:
                    - containerPort: 5000
                    env:
                    - name: FLASK_ENV
                      value: production
            EOF
          "