name: Infrastructure and Deployment Pipeline

on:
  push:
    branches: [main]

env:
  AWS_REGION: 'us-west-2'
  FLASK_PORT: '5000'
  DOCKER_IMAGE: ghcr.io/${{ github.repository_owner }}/re2ect-app:latest

jobs:
  provision-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      ec2_ip: ${{ steps.get-outputs.outputs.public_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="ghcr_username=${{ github.repository_owner }}" -var="ghcr_token=${{ secrets.GITHUB_TOKEN }}"
        working-directory: ./terraform

      - name: Get Public IP
        id: get-outputs
        run: |
          echo "public_ip=$(terraform -chdir=./terraform output -raw public_ip)" >> $GITHUB_OUTPUT

      - name: Prepare SSH Key
        run: |
          mkdir -p ./ssh_artifacts
          terraform -chdir=./terraform output -raw ssh_private_key > ./ssh_artifacts/deploy_key
          chmod 600 ./ssh_artifacts/deploy_key

      - name: Upload SSH Key
        uses: actions/upload-artifact@v4
        with:
          name: ssh-key
          path: ./ssh_artifacts/deploy_key
          retention-days: 1

      - name: Verify Instance Readiness
        run: |
          IP=${{ steps.get-outputs.outputs.public_ip }}
          until nc -z -w5 $IP 22; do sleep 10; echo "Waiting for SSH..."; done

  deploy-application:
    needs: provision-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Download SSH Key
        uses: actions/download-artifact@v4
        with:
          name: ssh-key
          path: ~/.ssh/

      - name: Configure SSH
        run: |
          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/deploy_key
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Verify k3s Readiness
        run: |
          ssh -i ~/.ssh/deploy_key \
              ec2-user@${{ needs.provision-infrastructure.outputs.ec2_ip }} \
              "until kubectl get nodes &>/dev/null; do sleep 5; echo 'Waiting for k3s...'; done"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          push: true
          tags: ${{ env.DOCKER_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Configure GHCR Auth for Containerd
        run: |
          IP=${{ needs.provision-infrastructure.outputs.ec2_ip }}
          ssh -i ~/.ssh/deploy_key ec2-user@$IP << 'EOF'
          sudo mkdir -p /etc/rancher/k3s/
          cat << 'EOL' | sudo tee /etc/rancher/k3s/registries.yaml
          mirrors:
            ghcr.io:
              endpoint:
                - "https://ghcr.io"
          configs:
            "ghcr.io":
              auth:
                username: "${{ github.repository_owner }}"
                password: "${{ secrets.GITHUB_TOKEN }}"
          EOL
          sudo systemctl restart k3s
          EOF

      - name: Configure Traefik Properly
        run: |
          IP=${{ needs.provision-infrastructure.outputs.ec2_ip }}
          ssh -i ~/.ssh/deploy_key ec2-user@$IP << 'EOF'
          sudo mkdir -p /var/lib/rancher/k3s/server/manifests/
          sudo cat << 'EOL' > /var/lib/rancher/k3s/server/manifests/traefik-config.yaml
          apiVersion: helm.cattle.io/v1
          kind: HelmChartConfig
          metadata:
            name: traefik
            namespace: kube-system
          spec:
            valuesContent: |-
              ports:
                web:
                  port: 80
                  hostPort: 80
                websecure:
                  port: 443
                  hostPort: 443
              deployment:
                kind: DaemonSet
                hostNetwork: true
              providers:
                kubernetesIngress:
                  publishedService:
                    enabled: true
              log:
                level: DEBUG
          EOL
          sudo systemctl restart k3s
          sleep 15
          EOF

      - name: Deploy Application
        run: |
          cat <<EOF > deploy.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: re2ect-app
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: re2ect-app
            template:
              metadata:
                labels:
                  app: re2ect-app
              spec:
                containers:
                - name: app
                  image: ${{ env.DOCKER_IMAGE }}
                  ports:
                  - containerPort: ${{ env.FLASK_PORT }}
                  readinessProbe:
                    httpGet:
                      path: /
                      port: ${{ env.FLASK_PORT }}
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: re2ect-app-service
          spec:
            ports:
            - port: 80
              targetPort: ${{ env.FLASK_PORT }}
            selector:
              app: re2ect-app
          ---
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: re2ect-app-ingress
            annotations:
              traefik.ingress.kubernetes.io/router.entrypoints: web
          spec:
            rules:
            - http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: re2ect-app-service
                      port:
                        number: 80
          EOF

          scp -i ~/.ssh/deploy_key deploy.yaml ec2-user@${{ needs.provision-infrastructure.outputs.ec2_ip }}:~/ 
          ssh -i ~/.ssh/deploy_key ec2-user@${{ needs.provision-infrastructure.outputs.ec2_ip }} \
            "kubectl apply -f deploy.yaml"

      - name: Verify Deployment
        run: |
          IP=${{ needs.provision-infrastructure.outputs.ec2_ip }}
          ssh -i ~/.ssh/deploy_key ec2-user@$IP << 'EOF'
          kubectl wait --for=condition=available deployment/re2ect-app --timeout=120s
          kubectl get pods,svc,ingress -A
          sudo netstat -tulnp | grep -E '80|443'
          EOF

      - name: Test Application
        run: |
          IP=${{ needs.provision-infrastructure.outputs.ec2_ip }}
          echo "Testing application at http://$IP"
          
          # First verify basic connectivity
          if ! nc -z -w5 $IP 80; then
            echo "Port 80 not accessible"
            exit 1
          fi
          
          # Then test with curl using proper URL formatting
          for i in {1..20}; do
            if curl -sSf -m 10 "http://$IP" >/dev/null; then
              echo "Application responded successfully"
              curl -v "http://$IP"
              exit 0
            fi
            echo "Attempt $i: Waiting for application to respond..."
            sleep 5
          done
          
          echo "Application did not become responsive after 20 attempts"
          exit 1

      - name: Debug on Failure
        if: ${{ failure() }}
        run: |
          IP=${{ needs.provision-infrastructure.outputs.ec2_ip }}
          echo "=== Debug Information ==="
          echo "Port check:"
          nc -zv $IP 80 || echo "Port 80 not accessible"
          echo "Curl verbose output:"
          curl -v "http://$IP" || true
          echo "Traefik logs:"
          ssh -i ~/.ssh/deploy_key ec2-user@$IP \
            "kubectl logs -n kube-system -l app.kubernetes.io/name=traefik --tail=50"
          echo "Application logs:"
          ssh -i ~/.ssh/deploy_key ec2-user@$IP \
            "kubectl logs deployment/re2ect-app --tail=20"

      - name: Debug Network
        run: |
          IP=${{ needs.provision-infrastructure.outputs.ec2_ip }}
          echo "Testing connection to port 80..."
          nc -zv $IP 80
          echo "Curl test with full URL..."
          curl -v "http://$IP"