name: Infrastructure and Deployment Pipeline

on:
  push:
    branches: [main]

env:
  AWS_REGION: 'us-west-2'
  FLASK_PORT: '5000'

jobs:
  provision-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      ec2_ip: ${{ steps.get-outputs.outputs.public_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        id: terraform-apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

      - name: Get Terraform Outputs and Setup SSH
        id: get-outputs
        run: |
          # Create SSH directory and set permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Get public IP
          PUBLIC_IP=$(terraform -chdir=./terraform output -raw public_ip)
          echo "public_ip=${PUBLIC_IP}" >> $GITHUB_OUTPUT
          echo "EC2_IP=${PUBLIC_IP}" >> $GITHUB_ENV
          
          # Write key directly to file
          terraform -chdir=./terraform output -raw ssh_private_key > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Upload key as artifact for next job
          mkdir -p ./ssh_artifacts
          cp ~/.ssh/deploy_key ./ssh_artifacts/
          echo "Private key stored as artifact"

      - name: Upload SSH Key Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ssh-key
          path: ./ssh_artifacts/deploy_key
          retention-days: 1

      - name: Wait for Instance Readiness
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: |
          # Wait for EC2 status checks
          INSTANCE_ID=$(terraform -chdir=./terraform output -raw instance_id)
          aws ec2 wait instance-status-ok \
            --instance-ids $INSTANCE_ID \
            --region ${{ env.AWS_REGION }}
          
          # Wait for SSH
          IP=${{ env.EC2_IP }}
          echo "Waiting for SSH on ${IP}..."
          until nc -z -w5 $IP 22; do
            sleep 10
            echo "Still waiting for SSH..."
          done
          echo "SSH is now available!"

      - name: Verify k3s Installation
        run: |
          echo "Waiting for k3s to become ready..."
          ssh -o StrictHostKeyChecking=no \
              -o ConnectTimeout=30 \
              -i ~/.ssh/deploy_key \
              ec2-user@${{ env.EC2_IP }} \
              "until kubectl get nodes >/dev/null 2>&1; do sleep 10; echo 'Waiting for k3s...'; done"
          echo "k3s is ready!"

  deploy-application:
    needs: provision-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Download SSH Key Artifact
        uses: actions/download-artifact@v4
        with:
          name: ssh-key
          path: ~/.ssh/

      - name: Configure SSH
        run: |
          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/deploy_key
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Verify EC2 Access
        run: |
          echo "Testing SSH connection to ${{ needs.provision-infrastructure.outputs.ec2_ip }}..."
          ssh -i ~/.ssh/deploy_key \
              ec2-user@${{ needs.provision-infrastructure.outputs.ec2_ip }} \
              "echo 'SSH connection successful! Hostname: $(hostname)'"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/re2pect-app:latest
            ghcr.io/${{ github.repository_owner }}/re2pect-app:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to k3s
        run: |
          ssh -i ~/.ssh/deploy_key \
              ec2-user@${{ needs.provision-infrastructure.outputs.ec2_ip }} "
            kubectl apply -f - <<EOF
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: re2pect-app
            spec:
              replicas: 2
              selector:
                matchLabels:
                  app: re2pect-app
              template:
                metadata:
                  labels:
                    app: re2pect-app
                spec:
                  containers:
                  - name: app
                    image: ghcr.io/${{ github.repository_owner }}/re2pect-app:${{ github.sha }}
                    ports:
                    - containerPort: ${{ env.FLASK_PORT }}
            EOF
          "